// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  name            String
  emailVerified   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  otps            Otp[]
  sessions        Session[]
  bookings        Booking[]
  twoFactorSecret String? // Field added for 2FA setup
}

model Otp {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  token        String
  refreshToken String? // Field to store the refresh token
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Shop {
  id           Int                @id @default(autoincrement())
  name         String
  location     String
  timeSlots    TimeSlot[]
  bookings     Booking[]
  availability ShopAvailability[]
}

model TimeSlot {
  id           Int                @id @default(autoincrement())
  hour         Int
  minute       Int
  date         DateTime
  shopId       Int
  shop         Shop               @relation(fields: [shopId], references: [id])
  availability ShopAvailability[] @relation("TimeSlotAvailability")

  @@unique([shopId, date, hour, minute])
}

model Booking {
  id             Int              @id @default(autoincrement())
  userId         Int
  shopId         Int
  date           DateTime
  hour           Int
  user           User             @relation(fields: [userId], references: [id])
  shop           Shop             @relation(fields: [shopId], references: [id])
  availabilityId Int
  availability   ShopAvailability @relation("AvailabilityBookings", fields: [availabilityId], references: [id])
  createdAt      DateTime         @default(now())
}

model ShopAvailability {
  id         Int       @id @default(autoincrement())
  shopId     Int
  timeSlotId Int
  shop       Shop      @relation(fields: [shopId], references: [id])
  timeSlot   TimeSlot  @relation(fields: [timeSlotId], references: [id], name: "TimeSlotAvailability")
  bookings   Booking[] @relation("AvailabilityBookings")

  @@unique([shopId, timeSlotId])
}

model Job {
  id        Int      @id @default(autoincrement())
  jobId     String   @unique
  status    String
  result    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  description String?
  createdAt   DateTime @default(now())
}

model Inventory {
  id       Int     @id @default(autoincrement())
  name     String
  quantity Int
  price    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
